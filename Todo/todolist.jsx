
import React, { useEffect, useState } from "react";
import "./App.css";

function Todolist() {
  /*React useState hookok 
    √Ållapot kezel√©sek
    Biztos√≠tj√°k az adatokat k√ºl√∂nf√©le komponenseknek
  */
  const [tasks, setTasks] = useState([]); /* Feladatok list√°ja (t√∂mb) √©s f√ºggv√©ny amivel friss√≠tj√ºk 
                                          Kezd≈ë√©rt√©k √ºres t√∂mb*/
  const [initialized, setInitialized] = useState(false); /*localStoragehez*/
  const [newTask, setNewTask] = useState("");/*√öj feladat sz√∂vege √©s input mez≈ë friss√≠t√©se */
  const [priority, setPriority] = useState("medium"); /*Prior√≠t√°s be√°ll√≠t√°sa, kezd≈ë √©rt√©k k√∂zepes */
  const [dueDate, setDueDate] = useState("");/*Hat√°rid≈ë be√°ll√≠t√°sa, alapb√≥l √ºres √©rt√©k */
  const [editIndex, setEditIndex] = useState(null); /*A szerkeszt√©s alatt l√©v≈ë aktu√°lis adatok */
  const [editData, setEditData] = useState({ text: "", priority: "medium", dueDate: "" });
  const [filter, setFilter] = useState(() => localStorage.getItem("filter") || "all");
  const [darkMode, setDarkMode] = useState(() => localStorage.getItem("theme") === "dark");
  const [searchText, setSearchText] = useState("");

  /*
  √âletciklus esem√©nyek kezel√©se (useEffect)
  */
  useEffect(() => { /*Bet√∂lti a localStorage-ben t√°rolt adatokat √©s menti is zokat v√°ltoz√°s eset√©n */
    try {
      const saved = localStorage.getItem("tasks");/*Megpr√≥b√°ljuk beolvasni a localStorage-b√≥l */
      if (saved) { /*Ha tal√°lunk, nem √ºres vagy nem null √©rt√©ket */
        const parsed = JSON.parse(saved);/*Javascript objektum√° alak√≠tjuk */
        if (Array.isArray(parsed)) { /*Megn√©z√ºk, hogy t√∂mb-e */
          setTasks(parsed);/*setTask seg√≠ts√©g√©vel be√°ll√≠tjuk az √°llapotot */
        }
      }
    } catch (e) {
      console.error("Hib√°s JSON a localStorage-ben:", e);/*Hib√°s form√°tum eset√©n */
    }
    setInitialized(true);
  }, []);

  /*Feladatok ment√©se, m√≥dos√≠t√°s eset√©n*/
  useEffect(() => {
    if (initialized) {/*Megn√©zi, hogy a inicializ√°lva van-e a t√∂mb, hogy ne √≠rj√ºk fel√ºl √≥res t√∂mbbel*/
      localStorage.setItem("tasks", JSON.stringify(tasks));/*Ha igen akkor bet√∂ltj√ºk a tasks jelenlegi
                                                              √°llapot√°t a localStorage-be */
    }
  }, [tasks, initialized]);

  /*T√©ma be√°ll√≠t√°sa √©s ment√©se*/
  useEffect(() => {
    document.body.className = darkMode ? "dark" : ""; /*A dokumentum body elem√©nek classnName tulajdons√°g√°t
                                                        √°ll√≠tjuk */
    localStorage.setItem("theme", darkMode ? "dark" : "light");
  }, [darkMode]);

  /*Sz≈±r√©si be√°ll√≠t√°s ment√©se*/
  useEffect(() => { /*Akkor fut le ha a filter √°llapota megv√°ltozik (all, completed, active) */
    localStorage.setItem("filter", filter);
  }, [filter]);

  /*√öj feladat hozz√°ad√°sa*/
  const handleAdd = () => {
    if (newTask.trim() === "") return;/**Ellen√∂rzi, hogy nem √ºres √©s a sork√∂z√∂ket is lev√°gjuk */
    const newItem = { /*√öj javascript objektum */
      text: newTask.trim(), /*A feladat sz√∂vege a newTask √°llapotb√≥l */
      priority,
      dueDate,
      completed: false,
      createdAt: Date.now()
    };
    setTasks([...tasks, newItem]); /*Hozz√°adja a feladatokhoz az √∫j feladatot */
    setNewTask(""); /*Mez≈ëk alaphelyzetbe √°ll√≠t√°sa */
    setPriority("medium");
    setDueDate("");
  };

  /*Feladat t√∂rl√©se index alapj√°n */
  const handleDelete = (i) => setTasks(tasks.filter((_, idx) => idx !== i));
  /*V√©gig megy a task t√∂mb√∂n √©s t√∂rli az i index≈± elemet */

  /*Megv√°ltoztatja a completed mez≈ë √©rt√©k√©t */
  const handleToggleComplete = (i) => { /*Az i index≈± feladatot kiv√°lasztjuk */
    const updated = [...tasks]; /*Lem√°soljuk a completed mez≈ë √©rt√©k√©t */
    updated[i].completed = !updated[i].completed; /*Vessz√ºk az √©rt√©k ellentetj√©t */
    setTasks(updated); /*Majd ezzel az √©rt√©kkel friss√≠tj√ºk az √°llapotot */
  };

  /*Feladat szerkeszt√©se */
  const handleEdit = (i) => {
    setEditIndex(i);
    setEditData(tasks[i]);
  };

  /*Feladat szerkeszt√©s√©nek a ment√©se */
  const saveEdit = () => {
    const updated = [...tasks]; /*Lem√°solja a task t√∂mb√∂t
                                (the law of immutability) */
    updated[editIndex] = editData; /*A kiv√°lasztottat fel√ºl√≠rja */
    setTasks(updated);/*Friss√≠ti a list√°t az √∫j friss√≠tett feladattal */
    setEditIndex(null);/*Szerkeszt√©si m√≥d v√©ge -> visszat√©r√©s a norm√°l UI m√≥dba */
  };

  /*Feladat mozgat√°sa a list√°ban */
  const move = (i, dir) => { /*Mozgatand√≥ feladat aktu√°lis indexe, √©s a direction(ir√°ny) */
    const target = i + dir;/*Kisz√°molja a c√©l indexet ahov√° mozgatni szeretn√©nk */
    if (target < 0 || target >= tasks.length) return;/*Ha a lista elej√©n vagy v√©g√©n van eleve akkor onnan nem tudjuk
                                                      Lejebb vagy feljebb mozgatni*/
    const updated = [...tasks]; /*Lem√°soljuk a mostani feladatokat */
    [updated[i], updated[target]] = [updated[target], updated[i]]; /*Kicser√©lj√ºk a feladatok hely√©t */
    setTasks(updated); /*Friss√≠tj√ºk az √°llapotot */
  };

  /*Prior√≠t√°shoz sz√≠n rendel√©se */
  const getPriorityColor = (level) => ({
    high: "#f87171", /*Piros */
    medium: "#facc15", /*S√°rga */
    low: "#34d399" /*Z√∂ld */
  }[level] || "#d1d5db"); /*Sz√ºrke, ha nem a h√°rom prior√≠t√°si sorrend k√∂z√ºl ker√ºl be */

  /*Sz≈±r√©s √©s keres√©s */
  const filteredTasks = tasks.filter(task => {
    /*K√©tf√©le sz≈±r≈ë a task t√∂mbre alkalmazva */
    const matchFilter =
      filter === "all" ||/*Minden feladat kivan v√°lasztva */
      (filter === "completed" && task.completed) ||/*completed csak a k√©sz */
      (filter === "active" && !task.completed); /*ha az active akkor csak a m√©g el nem k√©sz√ºlteket */

    const matchSearch = task.text.toLowerCase().includes(searchText.toLowerCase());/*Kisbet√ºss√© teszi
                                                                        a sz√∂veg keres√©s √©rdek√©ben */
    return matchFilter && matchSearch;
  });

  return (
    <div className="todo-container">
      <div className="header">
        <h2>üìù To-Do Lista</h2>
        <button className="theme-toggle" onClick={() => setDarkMode(!darkMode)} title="T√©ma v√°lt√°sa">
          {darkMode ? "‚òÄÔ∏è" : "üåô"}
        </button>
      </div>

      <div className="input-group">
        <input
          type="text"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
          placeholder="√öj feladat"
        />
        <select value={priority} onChange={(e) => setPriority(e.target.value)}>
          <option value="low">Alacsony</option>
          <option value="medium">K√∂zepes</option>
          <option value="high">Magas</option>
        </select>
        <input
          type="date"
          value={dueDate}
          onChange={(e) => setDueDate(e.target.value)}
        />
        
        <button onClick={handleAdd} title="Feladat hozz√°ad√°sa">Hozz√°ad√°s</button>
      </div>

        
      <div className="filter-group">
        <label>Sz≈±r√©s:</label>
        <select value={filter} onChange={(e) => setFilter(e.target.value)}>
          <option value="all">Minden</option>
          <option value="completed">K√©sz</option>
          <option value="active">Akt√≠v</option>
        </select>

        <input
          type="text"
          placeholder="Keres√©s..."
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
          title="Sz√∂veg alapj√°n sz≈±r√©s"
        />
      </div>

      <ul className="task-list">
        {filteredTasks.map((task, i) => ( /**V√©gig megy√ºnk a t√∂mb√∂n */
          <li key={i} /*A kulcs a React-nak kell, hogy nyomon tudja k√∂vetni */
              className="fade-in"
              style={{ borderLeft: `8px solid ${getPriorityColor(task.priority)}` }}
          >
            {editIndex === i ? (
              <>
                <input
                  value={editData.text}
                  onChange={(e) => setEditData({ ...editData, text: e.target.value })}
                />
                <select
                  value={editData.priority}
                  onChange={(e) => setEditData({ ...editData, priority: e.target.value })}
                >
                  <option value="low">Alacsony</option>
                  <option value="medium">K√∂zepes</option>
                  <option value="high">Magas</option>
                </select>
                <input
                  type="date"
                  value={editData.dueDate}
                  onChange={(e) => setEditData({ ...editData, dueDate: e.target.value })}
                />
                <button className="save-button" onClick={saveEdit} title="Szerkeszt√©s ment√©se">Ment√©s</button>
              </>
            ) : (
              <>
                <div className="task-content">
                  <span
                    className="task-text"
                    /*√Åthuzza a k√©sz fealadatot */
                    style={{ textDecoration: task.completed ? "line-through" : "none" }}
                  >
                    {task.text}
                  </span>
                  {task.dueDate && (
                    <span className="task-date">
                      üìÖ {task.dueDate}
                      {new Date(task.dueDate) < new Date().setHours(0,0,0,0) && !task.completed && (
                        <span className="overdue"> ‚õî Lej√°rt!</span>
                      )}
                    </span>
                  )}
                </div>
                <div className="task-actions">
                  <button onClick={() => handleToggleComplete(i)} title="K√©sz / Nem k√©sz">
                    {task.completed ? "‚úÖ" : "‚òëÔ∏è"}
                  </button>
                  <button onClick={() => handleEdit(i)} title="Szerkeszt√©s">‚úèÔ∏è</button>
                  <button onClick={() => handleDelete(i)} title="T√∂rl√©s">üóëÔ∏è</button>
                  <button onClick={() => move(i, -1)} title="Feljebb mozgat√°s">‚¨ÜÔ∏è</button>
                  <button onClick={() => move(i, 1)} title="Lejjebb mozgat√°s">‚¨áÔ∏è</button>
                </div>
              </>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}
export default Todolist;
