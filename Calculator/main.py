#K√∂nyvt√°rak import√°l√°sa
import tkinter as tk #GUI l√©trehoz√°s√°hoz
from tkinter import messagebox #Hiba √ºzenet megjelen√≠t√©s√©hez
import math #Matematikai m≈±veletekhez
import os #F√°jlkezel√©shez

#Sz√°mol√≥g√©p oszt√°ly
class Calculator:
    def __init__(self, root):
        self.root = root #F≈ë tkinter ablak
        self.root.title("Sz√°mol√≥g√©p") #Az ablak c√≠me
        self.root.geometry("600x700") #A felbont√°sa
        self.root.resizable(False, False) #Ne lehessen m√©retezhet≈ë (se v√≠zszintesen, se f√ºgg≈ëlegesen)
        self.calculation = "" #Aktu√°lis m≈±velet t√°rol√°sa (kezdetben √ºres)"
        self.history = [] #Sz√°m√≠t√°sok el≈ëzm√©nyei kezdetben √ºres t√∂mb
        self.dark_mode = False #Dark mode-ban induljon vagy sem
        self.scientific_mode = True #Tudom√°nyos m√≥dban induljon vagy sem
        self.history_file = "calculator_history.txt" #Milyen f√°jlt haszn√°ljon fel az el≈ëzm√©nyekhez
        self.buttons = [] #A sima gombokat t√°r√≥lja
        self.scientific_buttons = [] #A tudom√°nyos gombokat t√°r√≥lja (sin, cos, log stb.)

        self.create_widgets() # Megh√≠vja azt a met√≥dust, amely az √∂sszes vizu√°lis komponenst (gombokat, mez≈ëket) l√©trehozza √©s megjelen√≠ti az ablakban.
        self.bind_keys() #Ez a met√≥dus bek√∂ti a billenty≈±zetes vez√©rl√©st (pl. Enter = sz√°m√≠t√°s, Backspace = t√∂rl√©s, sz√°mok, +, -, /, * stb. billenty≈±k m≈±k√∂djenek).

    def create_widgets(self):
        # Inform√°ci√≥s s√°v gombokhoz
        self.tooltip = tk.StringVar() #Dinamikusan friss√≠thet≈ë sz√∂veget t√°rol (tooltip √ºzenet)
        self.tooltip_label = tk.Label(self.root, textvariable=self.tooltip, font=("Arial", 10), anchor="w")
        # cimke ami tooltip sz√∂veg√©t mutatja
        self.tooltip_label.pack(fill="x", padx=10, pady=(0, 5))#

        # Fels≈ëvez√©rl≈ë gombok(t√©mav√°lt√°s stb.)
        top_frame = tk.Frame(self.root)
        top_frame.pack(fill="x", padx=10, pady=(10, 0))

        #T√©ma v√°lt√°s
        self.theme_btn = tk.Button(top_frame, text="üåô", command=self.toggle_theme, font=("Arial", 12)) #Egy frame ami v√≠zszintesen rendezi a gombokat
        self.theme_btn.pack(side="right")

        #Tudom√°nyos n√©zet gomb
        self.mode_btn = tk.Button(top_frame, text="Tud. n√©zet: be", command=self.toggle_mode, font=("Arial", 12))
        self.mode_btn.pack(side="left")

        # Kijelz≈ë mez≈ë az eredm√©ny √©s el≈ëzm√©ny megjelen√≠t√©s√©re
        self.display = tk.Entry(self.root, font=("Arial", 24), bd=10, relief="sunken", justify="right")#Nagy bet≈±m√©ret, jobb oldalra igaz√≠tva
        self.display.pack(fill="x", padx=10, pady=10)

        # El≈ëzm√©nyek (utolso 5 sz√°m√≠t√°s)
        self.history_display = tk.Text(self.root, height=4, font=("Arial", 10), bg="#f4f4f4", state="disabled") #State disabled, hogy ne lehessen szerkeszteni
        self.history_display.pack(fill="x", padx=10, pady=(0, 10))

        # "Tooltip" defin√≠ci√≥k (dictionary-ben t√°rolva)
        self.tooltips = {
            "sin": "Szinusz (fokban)",
            "cos": "Koszinusz (fokban)",
            "‚àö": "N√©gyzetgy√∂k",
            "^": "Hatv√°nyoz√°s",
            "log": "Logaritmus (10-es alap)",
            "ln": "Term√©szetes logaritmus",
            "œÄ": "Pi √©rt√©ke",
            "e": "Euler sz√°m",
            "√∑": "Oszt√°s",
            "√ó": "Szorz√°s",
            "‚àí": "Kivon√°s",
            "‚å´": "T√∂rl√©s",
            "C": "T√∂rl√©s minden",
            "=": "Sz√°m√≠t√°s"
        }

        # Gomb defin√≠ci√≥k
        btns = [
            ('7', '8', '9', '√∑'),
            ('4', '5', '6', '√ó'),
            ('1', '2', '3', '‚àí'),
            ('0', '.', '(', ')'),
            ('‚å´', 'C', '=', '+')
        ]

        #Tudom√°nyos gombok
        sci_btns = [
            ('sin', 'cos', '‚àö', '^'),
            ('log', 'ln', 'œÄ', 'e')
        ]

        self.btn_frame = tk.Frame(self.root)
        self.btn_frame.pack()

        #Gombok legener√°l√°sa (sz√°mok)
        for row_index, row in enumerate(btns):
            for col_index, symbol in enumerate(row):
                btn = tk.Button(self.btn_frame, text=symbol, width=8, height=2, font=("Arial", 14),
                                command=lambda s=symbol: self.on_button_click(s)) #Biztos√≠tja, hogy a gomb kattint√°s a megfelel≈ë szimbolumot k√ºldje
                btn.grid(row=row_index, column=col_index, padx=3, pady=3)
                btn.bind("<Enter>", lambda e, b=btn, s=symbol: self.show_tooltip(s, b)) #Tooltip esem√©nyek
                btn.bind("<Leave>", lambda e, b=btn: self.hide_tooltip(b))#hozz√°k√∂t√©se
                btn.configure(relief="flat")
                self.buttons.append(btn)

        self.sci_frame = tk.Frame(self.root)
        self.sci_frame.pack()

        # Gombok legener√°l√°sa (Tudom√°nyos)
        #Hasonl√≥ logika mint az el≈ëz≈ë ciklusban
        for row_index, row in enumerate(sci_btns):
            for col_index, symbol in enumerate(row):
                btn = tk.Button(self.sci_frame, text=symbol, width=8, height=2, font=("Arial", 14),
                                command=lambda s=symbol: self.on_button_click(s))
                btn.grid(row=row_index, column=col_index, padx=3, pady=3)
                btn.bind("<Enter>", lambda e, b=btn, s=symbol: self.show_tooltip(s, b))
                btn.bind("<Leave>", lambda e, b=btn: self.hide_tooltip(b))
                btn.configure(relief="flat")
                self.scientific_buttons.append(btn)

    #Ki/be kapcsolja a tudom√°nyos n√©zetet
    def toggle_mode(self):
        #Egyfajta toggle kapcsol√≥, a jelenlegi m√≥d ellentetj√©t veszi
        self.scientific_mode = not self.scientific_mode
        if self.scientific_mode: #Ha tudom√°nyos n√©zetben van
            self.sci_frame.pack() #Elhelyezi a tudom√°nyos gombokat
            self.mode_btn.configure(text="Tud. n√©zet: be") #Ki√≠rja, hogy jelenleg a tudom√°nyos m√≥dban van
        else:
            self.sci_frame.forget() #Elt√°vol√≠tja a hely√©t
            self.mode_btn.configure(text="Tud. n√©zet: ki") #Kii√≠rja, hogy nincs bekapcsolva

    #Tooltip mutat√°sa az eg√©r r√°vitelekor
    def show_tooltip(self, symbol, button):
        if symbol in self.tooltips: #Ellen≈ërzi, hogy van-e tooltip sz√∂veg a symbol-hoz rendelve
            self.tooltip.set(self.tooltips[symbol]) # Be√°ll√≠tja a tooltip sz√∂veget, ami az Entry feletti kis s√°vban jelenik meg
        button.configure(relief="raised") #Ez egy kis vizu√°lis kiemel√©s: a gomb kin√©zete kicsit kiemelkedik, amikor az eg√©r f√∂l√∂tte van (raised st√≠lus)

    #Tooltip elrejt√©se
    def hide_tooltip(self, button):
        self.tooltip.set("") #Egyszer≈±en ki√ºr√≠ti a tooltip sz√∂veget, √≠gy a felhaszn√°l√≥ nem l√°t semmit a tooltip mez≈ëben
        button.configure(relief="flat") # Vissza√°ll√≠tja a gomb kin√©zet√©t eredeti, lapos st√≠lus√∫ra (flat), vagyis megsz√ºnteti a kiemel√©st

    #A k√ºl√∂nleges jelekhez rendel matematikai logik√°t
    def on_button_click(self, symbol):
        if symbol in ["C", "CLR"]:
            self.calculation = ""
        elif symbol in ["‚å´", "DEL"]:
            self.calculation = self.calculation[:-1]
        elif symbol == "=":
            self.evaluate()
            return
        elif symbol == "‚àö":
            self.calculation += "math.sqrt("
        elif symbol == "sin":
            self.calculation += "math.sin(math.radians("
        elif symbol == "cos":
            self.calculation += "math.cos(math.radians("
        elif symbol == "log":
            self.calculation += "math.log10("
        elif symbol == "ln":
            self.calculation += "math.log("
        elif symbol in ["pi", "œÄ"]:
            self.calculation += "math.pi"
        elif symbol == "e":
            self.calculation += "math.e"
        elif symbol == "^":
            self.calculation += "**"
        elif symbol == "√∑":
            self.calculation += "/"
        elif symbol == "√ó":
            self.calculation += "*"
        elif symbol == "‚àí":
            self.calculation += "-"
        elif symbol == "(":
            self.calculation += "("
        elif symbol == ")":
            self.calculation += ")"
        else:
            self.calculation += symbol

        if self.calculation.endswith("(") and any(self.calculation.endswith(f) for f in ["log10(", "log(", "sin(", "cos(", "sqrt("]):
            self.calculation += ")"

        self.update_display()

    #Ki√©rt√©keli az aktu√°lis kifejez√©st
    def evaluate(self):
        try: #Hiba kezel√©s kezdete
            result = str(eval(self.calculation))#A be√©p√≠tett f√ºv√©nnyel kisz√°moljuk √©s stringg√© alak√≠tjuk, hogy kitudjuk iratni
            expression = f"{self.calculation} = {result}" #Form√°zott sz√∂veg
            self.history.append(expression) #Hozz√°adjuk az el≈ëzm√©ny list√°hoz
            self.save_to_file(expression) #F√°jlba ment√©s
            self.update_history() #Friss√≠ti az el≈ëzm√©ny ablakot
            self.calculation = result #Elmentj√ºk az eredm√©nyt, hogy tov√°bbi m≈±veleteket tudjunk vele folytatni
        except Exception as e: #Ha try r√©sz hib√°t √©szlel p√©ld√°ul (5+*2)
            messagebox.showerror("Hiba", f"Hib√°s kifejez√©s: {e}") #Hib√°s szintaxis eset√©n hiba √ºzenet
            self.calculation = "" #Aktu√°lis kifejez√©s t√∂rl√©se
        self.update_display() #Kijelz≈ë mez≈ë friss√≠t√©ses

    #T√∂rli az Entry mez≈ët majd √∫jra be√≠rja a kifejez√©st
    def update_display(self):
        self.display.delete(0, tk.END) # A kezd≈ë √©rt√©kt≈ël a v√©g√©ig t≈ërli a mez≈ët
        self.display.insert(0, self.calculation) #Be√≠rja a sz√°m√≠t√°s eredm√©ny√©t

    #Az el√∂zm√©ny friss√≠t√©se
    def update_history(self):
        self.history_display.config(state="normal") #Mivel a Text mez≈ët alapb√≥l "disabled" √°llapotban tartjuk (hogy ne lehessen bele√≠rni k√©zzel), el≈ëbb enged√©lyezni kell az √≠r√°st
        self.history_display.delete(1.0, tk.END) #Teljesen ki√ºr√≠ti az el≈ëz≈ë tartalmat a Text mez≈ëb≈ël
        for line in self.history[-5:]: #V√©gigmegy a self.history lista utols√≥ 5 elem√©n (a legfrissebb m≈±veletek)
            self.history_display.insert(tk.END, line + "\n") #Egyenk√©nt hozz√°adja ≈ëket az el≈ëzm√©nyek mez≈ëh√∂z, soronk√©nt
        self.history_display.config(state="disabled") #Ism√©t letiltja a mez≈ët, ne lehessen bele √≠rni

    #F√°jlba √≠rja a sorokat
    def save_to_file(self, expression):
        try: #Hibakezel√©s kezdete
            with open(self.history_file, "a") as file: #Megnyitja a f√°jlt append m√≥dban (self.history_file = el√©r√©si √∫t), a with lez√°rja a f√°jlt ha v√©gezt√ºnk
                file.write(expression + "\n") #Minden sz√°m√≠t√°s k√ºl√∂n sorban
        except Exception as e: #Ha valami hiba t√∂rt√©nik
            print(f"Nem siker√ºlt menteni a f√°jlba: {e}")

    #Billenty≈±zet kezel√©s
    def bind_keys(self):
        self.root.bind("<Return>", lambda event: self.evaluate()) #Enter eset√©n az eval f√ºggv√©ny fut le
        self.root.bind("<BackSpace>", lambda event: self.on_button_click("DEL")) #backspace billenty≈± eset√©n a t√∂rl√©s gomb fut le
        self.root.bind("<Key>", self.key_input) # √Åltal√°nos gomb figyel√©s p√©ld√°ul 7

    #Billenty≈± lenyom√°sa eset√©n
    def key_input(self, event):
        if event.char in '0123456789+-*/().': #Megn√©zi, hogy √©rv√©nyes matematikai karakter-e
            self.calculation += event.char #Hozz√°adja a kifejez√©shez
            self.update_display() #Kijelz≈ë friss√≠t√©se

    #Vil√°gos s√∂t√©t m√≥d v√°lt√°s
    def toggle_theme(self):
        self.dark_mode = not self.dark_mode #Toggle kapcsol√≥, az ellentetj√©t veszi a jelenlegi √°llapotnak
        bg = "#2e2e2e" if self.dark_mode else "#ffffff" #Sz√≠nek be√°ll√≠√°sa
        fg = "#ffffff" if self.dark_mode else "#000000"
        btn_bg = "#444444" if self.dark_mode else "#f0f0f0"

        self.root.configure(bg=bg) #Ablak h√°tt√©rsz√≠n√©t √°ll√≠tja
        self.display.configure(bg=bg, fg=fg, insertbackground=fg) #Kijelz≈ë mez≈ë sz√≠n√©t √°ll√≠tja
        self.history_display.configure(bg=bg, fg=fg) #El≈ëzm√©nyek mez≈ë sz√≠n√©t √°ll√≠tja
        self.tooltip_label.configure(bg=bg, fg=fg) #Tooltip mez≈ë sz√≠n√©t v√°ltoztatja
        self.theme_btn.configure(bg=bg, fg=fg, text="‚òÄÔ∏è" if self.dark_mode else "üåô") #A t√©mav√°lt√≥ gomb sz√≠ne √©s emojija is v√°ltozik
        self.mode_btn.configure(bg=bg, fg=fg) #Tudom√°nyos n√©zet gomb sz√≠ne is friss√ºl

        for btn in self.buttons + self.scientific_buttons: #Minden gomb megkapja a megfelel≈ë h√°tt√©rsz√≠nt
            btn.configure(bg=btn_bg, fg=fg)

#F≈ëprogram
if __name__ == "__main__":
    root = tk.Tk()
    app = Calculator(root)
    root.mainloop()
