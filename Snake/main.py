#---K√∂nyvt√°rak import√°l√°sa---
import tkinter as tk #Grafikus fel√ºlethez
import random #V√©letlenszer≈± sz√°m gener√°l√°shiz
from tkinter import simpledialog, colorchooser #Felhaszn√°l√≥i inputhoz
import json #Ment√©s/bet√∂lt√©s f√°jlb√≥l
import pygame #Hang lej√°tsz√°s√°hoz

# --- Konstansok ---
GAME_WIDTH = 550 #J√°t√©k sz√©less√©g
GAME_HEIGHT = 500 #J√°t√©k magass√°g
SPACE_SIZE = 50 #R√°csegys√©g
BODY_PARTS = 3 #K√≠gy√≥ kezd≈ë m√©rete
SNAKE_COLOR = "green" #Alap k√≠gy√≥ sz√≠n
FOOD_COLOR = "red" #Kaja sz√≠n
BACKGROUND_COLOR = "black" #H√°tt√©r sz√≠n
OBSTACLE_COLOR = "gray" #Akad√°ly sz√≠n

# --- K√≠gy√≥ oszt√°ly ---
class Snake:
    def __init__(self, canvas, color):
        self.canvas = canvas #A v√°szon amire rajzol
        self.body_size = BODY_PARTS #Ekkora m√©retet rajzol
        self.coordinates = [] #A k√≠gy√≥ test√©nek koordin√°t√°√≠t t√°rolja list√°ban
        self.squares = [] #A kirajzolt n√©gyzet list√°ja

        #L√©trehoz 3db [0,0] pozici√≥j√∫ test darabot
        for _ in range(self.body_size):
            self.coordinates.append([0, 0])

        for x, y in self.coordinates:
            #L√©trehozza a n√©gyzeteket
            square = self.canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=color, tags="snake")
            #Majd hozz√°adja a list√°hoz
            self.squares.append(square)

# --- Kaja oszt√°ly ---
class Food:
    def __init__(self, canvas):
        #Egy random helyre rakja a k√©perny≈ën a kaj√°t
        x = random.randint(0, (GAME_WIDTH // SPACE_SIZE) - 1) * SPACE_SIZE
        y = random.randint(0, (GAME_HEIGHT // SPACE_SIZE) - 1) * SPACE_SIZE
        self.coordinates = [x, y] #A kaja aktu√°lis poz√≠ci√≥ja
        #Itt rajzolja meg mag√°t a kaj√°t
        canvas.create_oval(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=FOOD_COLOR, tags="food")

# --- J√°t√©k oszt√°ly ---
class Game:
    def __init__(self, root):
        self.root = root #Tkinter f≈ëablak
        self.root.title("üêç Snake J√°t√©k") #C√≠m be√°ll√≠t√°sa
        self.root.configure(bg="#222") #H√°tt√©r be√°ll√≠t√°sa
        self.root.resizable(False, False) #Ne lehessen √°ll√≠tani a m√©reten
        self.difficulty_level = "k√∂nny≈±" #Kezd√©snek a difficulty k√∂nny≈± legyen
        self.snake_color = SNAKE_COLOR #K√≠gy√≥ sz√≠n
        self.main_menu() #Megh√≠vja a main_menu() f√ºggv√©nyt

#--GUI men√ºpontokat hoz l√©tre √©s hozz√°juk rendel esem√©nykezel≈ëket--
    def main_menu(self):
        self.load_high_score() #Bet√∂lti a rekord pontot
        self.menu_frame = tk.Frame(self.root, bg="#222")
        self.menu_frame.pack(padx=20, pady=20)

        #F≈ëc√≠m
        title = tk.Label(self.menu_frame, text="üêç Snake J√°t√©k", font=("Arial", 32, "bold"), fg="white", bg="#222")
        title.pack(pady=15)

        #Rekord ki√≠r√°sa
        high_score_label = tk.Label(self.menu_frame, text=f"üîù Rekord: {self.high_score} pont", font=("Arial", 16), fg="lightgreen", bg="#222")
        high_score_label.pack(pady=(0, 15))

        #J√°t√©k ind√≠t√°sa gomb
        start_button = tk.Button(self.menu_frame, text="‚ñ∂Ô∏è J√°t√©k ind√≠t√°sa", font=("Arial", 16), width=20, command=self.start_game)
        start_button.pack(pady=5)

        #Neh√©zs√©g kiv√°laszt√°sa gomb
        difficulty_button = tk.Button(self.menu_frame, text="‚öôÔ∏è Neh√©zs√©g kiv√°laszt√°sa", font=("Arial", 16), width=20, command=self.select_difficulty)
        difficulty_button.pack(pady=5)

        #K√≠gy√≥sz√≠n kiv√°laszt√°sa gomb
        color_button = tk.Button(self.menu_frame, text="üé® K√≠gy√≥sz√≠n kiv√°laszt√°sa", font=("Arial", 16), width=20, command=self.select_snake_color)
        color_button.pack(pady=5)

        #J√°t√©k bet√∂lt√©se gomb
        load_button = tk.Button(self.menu_frame, text="üíæ J√°t√©k bet√∂lt√©se", font=("Arial", 16), width=20, command=self.load_saved_game_from_menu)
        load_button.pack(pady=5)

        #Kil√©p√©s gomb
        quit_button = tk.Button(self.menu_frame, text="‚ùå Kil√©p√©s", font=("Arial", 16), width=20, command=self.root.destroy)
        quit_button.pack(pady=5)

    #Neh√©zs√©g kiv√°laszt√°sa
    def select_difficulty(self):
        #Bek√©r egy szintet √©s elmenti sztringbe
        level = simpledialog.askstring("Neh√©zs√©gi szint", "V√°lassz szintet: k√∂nny≈± / k√∂zepes / neh√©z / ultra")
        if level:
            self.difficulty_level = level.lower()

    #K√≠gy√≥ sz√≠n kiv√°laszt√°sa sz√≠nv√°laszt√≥val
    def select_snake_color(self):
        color = colorchooser.askcolor(title="V√°lassz k√≠gy√≥sz√≠nt")[1]
        if color:
            self.snake_color = color

    def start_game(self):
        self.menu_frame.destroy() #Men√º t√∂rl√©se
        self.initialize_game() #J√°t√©k inicializ√°l√°sa, el≈ëk√©sz√≠ti a sz√ºks√©ges objektumokat
        self.new_game() #√öj j√°t√©k ind√≠t√°sa, mindent alaphelyzetbe √°ll√≠t

    def initialize_game(self):
        pygame.mixer.init() #Hangok bet√∂lt√©se
        pygame.mixer.music.load("background_music.mp3") #H√°tt√©r zene
        pygame.mixer.music.set_volume(0.2) # H√°tt√©r zene hangja 20%-ra cs√∂kken
        pygame.mixer.music.play(-1) #V√©gtelen√≠tve megy a zene
        self.eat_sound = pygame.mixer.Sound("eat.mp3") #Kaja ev√©s hang be√°ll√≠t√°sa
        self.game_over_sound = pygame.mixer.Sound("gameover.mp3") #J√°t√©k v√©ge hang be√°ll√≠t√°sa
        #√Ållapotv√°ltoz√≥k
        self.score = 0
        self.high_score = 0
        #Kezd≈ë √≠r√°ny (melyik ir√°nyba induljon a k√≠gy√≥)
        self.direction = "down"
        #Kezd≈ë sebess√©g
        self.speed = 100
        #Ne legyen meg√°ll√≠tva a jt√°k
        self.paused = False
        #Ne legyenek akad√°lyok
        self.obstacles = []
        #Ne legyen ultra hard
        self.ultra_hard = False
        #Rekord bet√∂lt√©se
        self.load_high_score()
        #Neh√©zs√©gi szint be√°ll√≠t√°sa
        self.apply_difficulty()

        #Pontsz√°m kijelz√©se
        self.label = tk.Label(self.root, text=f"Pont: 0 | Rekord: {self.high_score}", font=("Arial"))
        self.label.pack()

        #Hanger≈ë cs√∫szka
        self.volume_slider = tk.Scale(self.root, from_=0, to=100, orient="horizontal", label="Zene hangereje",
                                      command=self.set_volume)
        #Alapb√≥l 20-as hanger≈ën kezdd
        self.volume_slider.set(20)
        self.volume_slider.pack()

        #V√°szon l√©trehoz√°sa
        self.canvas = tk.Canvas(self.root, bg=BACKGROUND_COLOR, height=GAME_HEIGHT, width=GAME_WIDTH)
        self.canvas.pack()

        #Ablak k√∂z√©pre poz√≠cion√°l√°sa
        self.root.update()
        window_width = self.root.winfo_width()
        window_height = self.root.winfo_height()
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = int((screen_width / 2) - (window_width / 2))
        y = int((screen_height / 2) - (window_height / 2))
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")

        #Billenty≈±zet esem√©nyek hozz√° rendel√©se
        self.root.bind("<Left>", lambda event: self.change_direction("left"))
        self.root.bind("<Right>", lambda event: self.change_direction("right"))
        self.root.bind("<Up>", lambda event: self.change_direction("up"))
        self.root.bind("<Down>", lambda event: self.change_direction("down"))
        self.root.bind("r", lambda event: self.new_game())
        self.root.bind("s", lambda event: self.save_game())
        self.root.bind("l", lambda event: self.load_game())
        self.root.bind("p", lambda event: self.toggle_pause())

    def load_saved_game_from_menu(self):
        self.menu_frame.destroy()
        self.initialize_game()
        self.load_game()

    #√öj j√°t√©k
    def new_game(self):
        self.canvas.delete("all") #T√∂rli a v√°szonr√≥l az √∂sszes dolgot
        self.score = 0 #Vissza √°ll√≠tja a pontot
        self.direction = "down" #Vissza √°ll√≠tja az ir√°nyt
        self.label.config(text=f"Pont: {self.score} | Rekord: {self.high_score}")
        self.snake = Snake(self.canvas, self.snake_color) #√öj K√≠gy√≥ p√©ld√°ny
        self.food = Food(self.canvas) #√öj Kaja p√©ld√°ny
        if self.ultra_hard: #Ha be van kapcsolva az ultra neh√©zs√©g
            self.create_obstacles() # akkor legener√°lja az akad√°lyokat
        self.next_turn() #Elind√≠tja a f≈ëciklust

    #A sebess√©get √°ll√≠tja a kiv√°lasztott neh√©zs√©g alapj√°n
    def apply_difficulty(self):
        level = self.difficulty_level
        if level == "k√∂zepes":
            self.speed = 75
        elif level == "neh√©z":
            self.speed = 60
        elif level == "ultra":
            self.speed = 80
            self.ultra_hard = True
        else:
            self.speed = 100

    #A pygame zene hangerej√©t √°ll√≠tja
    def set_volume(self, val):
        volume = int(val) / 100
        pygame.mixer.music.set_volume(volume)

    #JSON form√°tumba menti a j√°t√©k jelenlegi √°ll√≠t√°s√°t
    def save_game(self):
        state = {
            "snake": self.snake.coordinates,
            "food": self.food.coordinates,
            "score": self.score,
            "high_score": self.high_score,
            "direction": self.direction,
            "obstacles": self.obstacles,
            "paused": self.paused,
            "ultra_hard": self.ultra_hard,
            "snake_color": self.snake_color,
            "difficulty_level": self.difficulty_level
        }
        with open("savegame.json", "w") as f:
            json.dump(state, f)

    #J√°t√©k bet√∂lt√©se JSON f√°jlb√≥l
    def load_game(self):
        try:
            with open("savegame.json", "r") as f:
                state = json.load(f)

            # V√°szon t√∂rl√©se
            self.canvas.delete("all")

            # √Ållapotok visszat√∂lt√©se
            self.snake_color = state.get("snake_color", SNAKE_COLOR)
            self.snake_coordinates = state["snake"]
            self.food_coordinates = state["food"]
            self.score = state["score"]
            self.high_score = state["high_score"]
            self.direction = state["direction"]
            self.paused = state.get("paused", False)
            self.ultra_hard = state.get("ultra_hard", False)
            self.difficulty_level = state.get("difficulty_level", "k√∂nny≈±")
            self.apply_difficulty()

            # K√≠gy√≥ √∫jragener√°l√°sa a mentett koordin√°t√°k alapj√°n
            self.snake = type('Snake', (), {})()  # √úres objektum (nem h√≠vja meg az __init__-et)
            self.snake.coordinates = self.snake_coordinates
            self.snake.squares = []
            for x, y in self.snake.coordinates:
                square = self.canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE,
                                                      fill=self.snake_color, tags="snake")
                self.snake.squares.append(square)

            # √âtelt √∫jra kirajzoljuk a mentett poz√≠ci√≥ra
            self.food = type('Food', (), {})()
            self.food.coordinates = self.food_coordinates
            self.canvas.create_oval(self.food.coordinates[0], self.food.coordinates[1],
                                    self.food.coordinates[0] + SPACE_SIZE, self.food.coordinates[1] + SPACE_SIZE,
                                    fill=FOOD_COLOR, tags="food")

            # Akad√°lyok kirajzol√°sa
            self.obstacles = state.get("obstacles", [])
            for x, y in self.obstacles:
                self.canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE,
                                             fill=OBSTACLE_COLOR, tags="obstacle")

            # Pontsz√°m kijelz√©s friss√≠t√©se
            self.label.config(text=f"Pont: {self.score} | Rekord: {self.high_score}")

            # √öjraind√≠tjuk a ciklust
            self.next_turn()

        except FileNotFoundError:
            pass

    #Sz√ºnet be/ki kapcsol√°sa
    def toggle_pause(self):
        self.paused = not self.paused
        if not self.paused:
            self.next_turn()

    #K√≠gy√≥ ir√°ny√≠t√°s√°nak be√°ll√≠t√°sa
    def change_direction(self, new_direction):
        opposite_directions = {"left": "right", "right": "left", "up": "down", "down": "up"}
        if new_direction != opposite_directions.get(self.direction):
            self.direction = new_direction

    #Akad√°lyok l√©trehoz√°sa
    def create_obstacles(self):
        for _ in range(4):
            x = random.randint(2, (GAME_WIDTH // SPACE_SIZE) - 3) * SPACE_SIZE
            y = random.randint(2, (GAME_HEIGHT // SPACE_SIZE) - 3) * SPACE_SIZE
            self.canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=OBSTACLE_COLOR, tags="obstacle")
            self.obstacles.append((x, y))

    #Friss√≠ti a pontsz√°m kijelz√©st
    def update_score(self):
        self.label.config(text=f"Pont: {self.score} | Rekord: {self.high_score}")

    #A j√°t√©k f≈ë ciklusa
    def next_turn(self):
        #Ha sz√ºnet van akkor nem t√∂rt√©nik semmi
        if self.paused:
            return

        #A k√≠gy√≥ fej√©nek aktu√°lis pozici√≥j√°nak lek√©rdez√©se
        x, y = self.snake.coordinates[0]

        #√öj poz√≠ci√≥ kisz√°m√≠t√°sa a mozg√°s ir√°ny alapj√°n
        if self.direction == "up":
            y -= SPACE_SIZE
        elif self.direction == "down":
            y += SPACE_SIZE
        elif self.direction == "left":
            x -= SPACE_SIZE
        elif self.direction == "right":
            x += SPACE_SIZE

        #Az √∫j poz√≠ci√≥t beilleszti a koordin√°ta lista elej√©re √©s ez lesz az √∫j fej.
        self.snake.coordinates.insert(0, (x, y))
        #√öj testdarabot rajzol az √∫j fejhelyre, √©s hozz√°adja a n√©gyzetek list√°j√°hoz
        square = self.canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=self.snake_color, tags="snake")
        self.snake.squares.insert(0, square)

        #Megn√©zi, hogy evett-e (fej a kaja poz√≠ci√≥ban)
        if x == self.food.coordinates[0] and y == self.food.coordinates[1]:
            self.score += 1#N√∂veli a pontsz√°mot
            #Megn√©zi, hogy az √∫j pont az rekord-e
            if self.score > self.high_score:
                self.high_score = self.score
                self.save_high_score()
            #Friss√≠ti a pontokat
            self.update_score()
            self.eat_sound.play() #Lej√°tsza az ev√©s hangot
            self.canvas.delete("food") #T≈ërli a kaj√°t a v√°szonr√≥l
            self.food = Food(self.canvas) # √öj kaja gener√°l√°sa
        else:
            del self.snake.coordinates[-1] # Ha nem evett akkor a k√≠gy√≥ v√©g√©t
            self.canvas.delete(self.snake.squares[-1]) # t√∂ri a list√°b√≥l √©s a k√©perny≈ër≈ël
            del self.snake.squares[-1]# √çgy a poz√≠ci√≥ja v√°ltozik

        #Megn√©zi, hogy van e √ºtk√∂z√©s
        if self.check_collisions():
            #Ha igen akkor v√©ge a j√°t√©knak
            self.game_over()
        else:
            #Ha nem akkor megh√≠vja √∫jra a f√ºggv√©nyt (next_turn)
            self.root.after(self.speed, self.next_turn)

    #Megn√©zi, t√∂rt√©nt-e √ºtk√∂z√©s
    def check_collisions(self):
        x, y = self.snake.coordinates[0]

        #Ha a falnak √ºtk√∂zik a fej, teh√°t elhagyja a j√°t√©k teret
        if x < 0 or x >= GAME_WIDTH or y < 0 or y >= GAME_HEIGHT:
            return True
        #Ha mag√°nak √ºtk√∂zik
        if (x, y) in self.snake.coordinates[1:]:
            return True
        #Ha akad√°lynak √ºtk√∂zik
        if (x, y) in self.obstacles:
            return True
        #Ha egyik sem akkor folytat√≥dik a j√°t√©k.
        return False

    #J√°t√©k v√©ge
    def game_over(self):
        #J√°t√©k v√©ge hang lej√°tsz√°sa
        self.game_over_sound.play()
        #T√∂rli a jelenlegi k√©perny≈ët
        self.canvas.delete("all")
        #Ki√≠rja a Vesztett√©l, nyomd meg az R bet≈±t stb..
        self.canvas.create_text(GAME_WIDTH / 2, GAME_HEIGHT / 2, font=("Arial", 50), text="VESZTETT√âL", fill="red")
        self.canvas.create_text(GAME_WIDTH / 2, GAME_HEIGHT / 2 + 50, font=("Arial", 25), text="Nyomd meg az R bet≈±t az √∫j j√°t√©khoz", fill="red")

    #Rekord bet√∂lt√©se
    def load_high_score(self):
        try:
            with open("highscore.txt", "r") as f:
                self.high_score = int(f.read())
        except:
            self.high_score = 0
    #Rekord ment√©se
    def save_high_score(self):
        with open("highscore.txt", "w") as f:
            f.write(str(self.high_score))

#GUI ablak l√©trehoz√°sa √©s Game p√©ld√°ny ind√≠t√°sa
if __name__ == "__main__":
    root = tk.Tk()
    game = Game(root)
    root.mainloop()
